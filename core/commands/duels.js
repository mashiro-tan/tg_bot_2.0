import { getRandomValues } from 'crypto'

import { getDuelants, getDuelStats, finishDuel } from '../db.js'
import { simpleUserName } from '../users.js'

const duelsByChat = new Map()

const rdrand8 = (max = 1, min = 0) => {
  const result = getRandomValues(new Uint8Array(1))[0]

  return min + (result * (max - min)) / 255
}

const defaultReasons = [
  '–≤ –Ω–æ–≥—É',
  '–≤ –≥–æ–ª–æ–≤—É',
  '–≤ —Å–µ—Ä–¥—Ü–µ',
  '–≤ –∫–æ–ª–µ–Ω–æ',
  '–≤ –∂–∏–≤–æ—Ç',
  '–≤ –∞–Ω—É—Å',
  '–≤ —Ä–æ—Ç',
]

const duelTimeout = 2 * 60 * 1000
const duelCooldown = 0.5 * 60 * 1000
const mutedMinutes = 5
const mutedFatalMinutes = 60

const makeDuel = async ({
  args,
  sender,
  mentions,
  reply,
  me,
  chat,
  userByMention: getByMention,
  chatUsers,
}) => {
  if (!mentions.length || mentions.length > 1) {
    await reply('–ö–æ–≥–æ —Å—Ç—Ä–µ–ª—è—Ç—å –±—É–¥–µ–º?')

    return
  }

  const mention = mentions[0]

  const userByMention = await getByMention(mention, true)

  if (!userByMention) {
    await reply('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!')

    return
  }

  if (userByMention.id === sender) {
    await reply('–í–µ—Ä–µ–≤–∫–∞ –≤ —Ñ–∏–∫—Å–ø—Ä–∞–π—Å–µ –¥–µ—à–µ–≤–ª–µ!')

    return
  }

  if (userByMention.muted) {
    await reply('–¢—Ä—É–ø –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—ã–∑–æ–≤...')

    return
  }

  if (userByMention.id === me().id || userByMention.bot) {
    await reply('–ë–æ—Ç—ã –Ω–µ –∏–≥—Ä–∞—é—Ç –≤ –∏–≥—Ä—ã!')

    return
  }

  const participants = [sender, userByMention.id]

  // const groupUsers = await chatUsers()

  // if (typeof groupUsers[userByMention.id] !== 'boolean') {
  //   await reply('–°–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ—Ç –≤ —ç—Ç–æ–π –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏!')

  //   return
  // }

  const activeDuel = [...duelsByChat.entries()].find(
    ([, duel]) =>
      participants.includes(duel.pushkin) || participants.includes(duel.dantes)
  )

  if (activeDuel) {
    await reply('–ù–µ–ª—å–∑—è –ø—Ä–∏–Ω–∏–º–∞—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –¥–≤—É—Ö –¥—É—ç–ª—è—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ!')

    return
  }

  const participantStats = await getDuelants(participants)

  if (
    participantStats.find(
      (duelant) =>
        duelant.last_duel && duelant.last_duel > Date.now() - duelCooldown
    )
  ) {
    await reply(
      '–û–¥–∏–Ω –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ–¥–∞–≤–Ω–æ —É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –¥—É—ç–ª–∏. –°–ø–∏–ª–∏ –ø–æ–∫–∞ –º—É—à–∫—É, –∫–æ–≤–±–æ–π!'
    )

    return
  }

  if (duelsByChat.get(chat)) {
    await reply('–í —á–∞—Ç–µ —É–∂–µ –∏–¥–µ—Ç –¥—É—ç–ª—å!')

    return
  }

  const stopDuel = async () => {
    duelsByChat.delete(chat)

    await reply('–î—É—ç–ª—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤!', true)
  }

  const duelReason =
    args && args.replace(new RegExp(`^@?${mention[1]}`), '').trim()

  const duelState = {
    dantes: sender,
    pushkin: userByMention.id,
    nextMovePushkin: true,
    stopDuel,
    timeout: null,
    reason: duelReason || null,
    firstTime: true,
  }

  duelState.timeout = setTimeout(stopDuel, duelTimeout)

  duelsByChat.set(chat, duelState)

  await reply('–î—É—ç–ª—å –Ω–∞—á–∞—Ç–∞, –∂–¥—ë–º —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!')
}

const makeShot = async ({
  args,
  sender,
  reply,
  me,
  chat,
  chatUsers,
  userById,
  muteFor,
}) => {
  const duel = duelsByChat.get(chat)

  if (!duel) {
    await reply('–í —á–∞—Ç–µ –∑–∞—Å–µ–ª —Å–Ω–∞–π–ø–µ')

    return
  }

  const {
    dantes,
    pushkin,
    nextMovePushkin,
    timeout,
    stopDuel,
    firstTime,
  } = duel

  if (![dantes, pushkin].includes(sender)) {
    await reply('–¢—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—à—å –≤ –¥—É—ç–ª–∏!')

    return
  }

  if (
    (sender === dantes && nextMovePushkin) ||
    (sender === pushkin && !nextMovePushkin)
  ) {
    await reply('–°–Ω–∞—á–∞–ª–∞ –¥–æ–∂–¥–∏—Å—å —Ö–æ–¥–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞!')

    return
  }

  clearTimeout(timeout)

  const shooter = sender
  const target = sender === dantes ? pushkin : dantes

  const shotOnTarget = rdrand8(2) > (firstTime ? 1.33 : 1)

  if (shotOnTarget) {
    duelsByChat.delete(chat)

    const winnerStats = await finishDuel({ winner: shooter, loser: target })

    const loser = await userById(target)

    const loserName = loser && simpleUserName(loser)

    const shotIn =
      (args && args.trim()) ||
      defaultReasons[Math.round(rdrand8(defaultReasons.length - 1))]

    const userList = await chatUsers()

    const isAdmin = userList[me().id]

    const userIsAdmin = userList[target]
    const shooterIsAdmin = userList[shooter]
    const muteDecision = shooterIsAdmin ? rdrand8(3) > 2 : true

    let muteStr = isAdmin
      ? '(–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –±–µ–∑ —Ç—Ä—É–ø–æ–≤, –≤–ø—Ä–µ–¥—å –±—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω–µ–π)'
      : undefined

    if (muteDecision && isAdmin && userIsAdmin !== true) {
      const fatality = rdrand8(24, 1) > 23

      const muteForMinutes = fatality ? mutedFatalMinutes : mutedMinutes

      try {
        await muteFor(target, muteForMinutes)

        muteStr = [
          '(',
          `–ú—å—é—Ç ${loserName} –Ω–∞ ${muteForMinutes} –º–∏–Ω—É—Ç`,
          shooterIsAdmin && shooter === dantes
            ? fatality
              ? ', –∞–¥–º–∏–Ω—É –ø—Ä–∏–≥–æ—Ä–µ–ª–æ'
              : ', –∞–¥–º–∏–Ω—É –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ'
            : '',
          fatality ? '. –ó–∞–π–º–∏—Å—å –¥–µ–ª–æ–º, –¥—Ä—É–≥' : '',
          ')',
        ]
          .filter(Boolean)
          .join('')
      } catch (e) {
        console.log(e)
        muteStr = `(–ú—å—é—Ç –Ω–µ —É–¥–∞–ª—Å—è)`
      }
    }

    await reply(
      [
        [`–¢—ã –ø–æ–±–µ–¥–∏–ª! ${loserName} –∑–∞—Å—Ç—Ä–µ–ª–µ–Ω ${shotIn}`, duel.reason]
          .filter(Boolean)
          .join(' '),
        muteStr,
        `–ü–æ–±–µ–¥: ${winnerStats.wins}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π: ${winnerStats.loses}`,
      ]
        .filter(Boolean)
        .join('\n')
    )

    return
  }

  duelsByChat.set(chat, {
    ...duel,
    firstTime: false,
    nextMovePushkin: !nextMovePushkin,
    timeout: setTimeout(stopDuel, duelTimeout),
  })

  await reply('–ü—Ä–æ–º–∞–∑–∞–ª, –º–∞–ª–æ–π!')
}

const getSimpleStats = async (duelists, userById) => {
  const result = []

  for (let duelist of duelists) {
    const { person } = duelist

    const userData = await userById(person)

    const username = simpleUserName(userData)

    result.push({ ...duelist, username })
  }

  return result
}

const makeStatsLine = (records) => {
  if (records.length > 0) {
    return records
      .map(
        (record) =>
          `${record.username}: ${record.wins} –ø–æ–±–µ–¥ –∏–∑ ${
            record.wins + record.loses
          } –¥—É—ç–ª–µ–π`
      )
      .join('\n')
  }

  return '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç...'
}

const duelStats = async ({ sender, reply, chatUsers, userById }) => {
  const userList = await chatUsers()

  const rawStats = await getDuelStats(Object.keys(userList || {}))

  const result = await getSimpleStats(rawStats, userById)

  const { winners, losers } = result.reduce(
    (acc, val) => {
      if (val.rate > 0.55) {
        acc.winners.push(val)
      } else if (val.rate < 0.45) {
        acc.losers.push(val)
      }

      return acc
    },
    { winners: [], losers: [] }
  )

  const topWinners = winners
    .sort((a, b) => b.wins * b.rate - a.wins * a.rate)
    .slice(0, 5)

  const topLosers = losers
    .sort((a, b) => b.loses * (1 - b.rate) - a.loses * (1 - a.rate))
    .slice(0, 5)

  const winnersLine = makeStatsLine(topWinners)
  const losersLine = makeStatsLine(topLosers)

  const senderStats = result.find((record) => record.person === sender)

  const senderLine = senderStats
    ? `–¢–≤–æ–∏—Ö –ø–æ–±–µ–¥: ${senderStats.wins}, –ø–æ—Ä–∞–∂–µ–Ω–∏–π: ${senderStats.loses}`
    : '–¢—ã –µ—â–µ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–ª —É—á–∞—Å—Ç–∏—è –≤ –¥—É—ç–ª–∏.'

  await reply(
    [
      senderLine,
      '',
      '–ö–æ–≤–±–æ–∏ üî´ —á–∞—Ç–∞:',
      winnersLine,
      '–ú–∏—à–µ–Ω–∏ üéØ —á–∞—Ç–∞:',
      losersLine,
    ].join('\n')
  )
}

export default {
  title: '–î—É—ç–ª–∏',
  scope: 'public',
  acl: 'base',
  check: (acl) => acl.base === true,
  –¥—É—ç–ª—å: {
    description: '–í—ã–∑–æ–≤ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–∞ –¥—É—ç–ª—å. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –ø—Ä–∏—á–∏–Ω—É.',
    action: makeDuel,
  },
  –≤—ã—Å—Ç—Ä–µ–ª: {
    description: '–ù—É—Ç—ã–ø–æ–Ω–µ–ª. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Ü–µ–ª—å.',
    action: makeShot,
  },
  –∫–æ–≤–±–æ–∏: {
    description: '–°—Ç–∞—Ç–∫–∞',
    action: duelStats,
  },
}
